// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: service.proto

#include "service.pb.h"
#include "service.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace pyServer {

static const char* MyService_method_names[] = {
  "/pyServer.MyService/Add",
  "/pyServer.MyService/PrintHelloWorld",
};

std::unique_ptr< MyService::Stub> MyService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MyService::Stub> stub(new MyService::Stub(channel, options));
  return stub;
}

MyService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Add_(MyService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PrintHelloWorld_(MyService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MyService::Stub::Add(::grpc::ClientContext* context, const ::pyServer::AddRequest& request, ::pyServer::AddResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::pyServer::AddRequest, ::pyServer::AddResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Add_, context, request, response);
}

void MyService::Stub::async::Add(::grpc::ClientContext* context, const ::pyServer::AddRequest* request, ::pyServer::AddResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::pyServer::AddRequest, ::pyServer::AddResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Add_, context, request, response, std::move(f));
}

void MyService::Stub::async::Add(::grpc::ClientContext* context, const ::pyServer::AddRequest* request, ::pyServer::AddResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Add_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pyServer::AddResponse>* MyService::Stub::PrepareAsyncAddRaw(::grpc::ClientContext* context, const ::pyServer::AddRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pyServer::AddResponse, ::pyServer::AddRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Add_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pyServer::AddResponse>* MyService::Stub::AsyncAddRaw(::grpc::ClientContext* context, const ::pyServer::AddRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MyService::Stub::PrintHelloWorld(::grpc::ClientContext* context, const ::pyServer::Empty& request, ::pyServer::HelloWorldResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::pyServer::Empty, ::pyServer::HelloWorldResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PrintHelloWorld_, context, request, response);
}

void MyService::Stub::async::PrintHelloWorld(::grpc::ClientContext* context, const ::pyServer::Empty* request, ::pyServer::HelloWorldResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::pyServer::Empty, ::pyServer::HelloWorldResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PrintHelloWorld_, context, request, response, std::move(f));
}

void MyService::Stub::async::PrintHelloWorld(::grpc::ClientContext* context, const ::pyServer::Empty* request, ::pyServer::HelloWorldResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PrintHelloWorld_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pyServer::HelloWorldResponse>* MyService::Stub::PrepareAsyncPrintHelloWorldRaw(::grpc::ClientContext* context, const ::pyServer::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pyServer::HelloWorldResponse, ::pyServer::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PrintHelloWorld_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pyServer::HelloWorldResponse>* MyService::Stub::AsyncPrintHelloWorldRaw(::grpc::ClientContext* context, const ::pyServer::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPrintHelloWorldRaw(context, request, cq);
  result->StartCall();
  return result;
}

MyService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MyService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MyService::Service, ::pyServer::AddRequest, ::pyServer::AddResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MyService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pyServer::AddRequest* req,
             ::pyServer::AddResponse* resp) {
               return service->Add(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MyService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MyService::Service, ::pyServer::Empty, ::pyServer::HelloWorldResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MyService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pyServer::Empty* req,
             ::pyServer::HelloWorldResponse* resp) {
               return service->PrintHelloWorld(ctx, req, resp);
             }, this)));
}

MyService::Service::~Service() {
}

::grpc::Status MyService::Service::Add(::grpc::ServerContext* context, const ::pyServer::AddRequest* request, ::pyServer::AddResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MyService::Service::PrintHelloWorld(::grpc::ServerContext* context, const ::pyServer::Empty* request, ::pyServer::HelloWorldResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace pyServer

